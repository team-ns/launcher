# It'd better to put [rust-toolchain][rt] file and specify version tag like this:
# `image: rust:1.32.0`
#
# [rt]: https://github.com/rust-lang/rustup.rs#the-toolchain-file
image: rust
stages: 
  - test
  - deploy
# Edit here for your usage
variables:
  BINARY_NAMES: launch_server
  MISC_ARTIFACTS: LICENSE



cache:
  key: $CI_COMMIT_REF_NAME-$CI_JOB_NAME
  paths:
    - target

build: &build
  stage: test
  script:
    - rustc --version
    - cargo version
    - cargo build --verbose
    - RUST_BACKTRACE=1 cargo test --verbose
  except:
    - tags

build_beta:
  <<: *build
  before_script:
    - echo beta > rust-toolchain

build_nightly:
  <<: *build
  before_script:
    - echo nightly > rust-toolchain
  allow_failure: true



.deploy_template: &deploy
  stage: deploy
  script:
    - rustup target add $CI_JOB_NAME
    # install cross compilers if needed
    - |
      set -x
      if [ "$GCC" != "" ]; then
      	apt-get update
      	apt-get install -yqq gcc-${GCC_PACKAGE-$GCC} ${APT}
      	cat <<-EOF >> $CARGO_HOME/config
      	[target.$CI_JOB_NAME]
      	linker = "$GCC-gcc"
      	EOF
        if [ "$RUST_FLAGS" != "" ]; then
           echo "rustflags = \"$RUST_FLAGS\"" >> $CARGO_HOME/config
        fi
      fi
    - rustc --version
    - cargo version
    - cargo build --release --target=$CI_JOB_NAME
    # collect artifacts
    - |
      set -x
      DIRNAME=$CI_PROJECT_NAME-$CI_COMMIT_TAG-$CI_JOB_NAME
      mkdir $DIRNAME
      for binary in $BINARY_NAMES; do
          cp target/$CI_JOB_NAME/release/$binary$BINARY_SUFFIX $DIRNAME
      done
      cp $MISC_ARTIFACTS $DIRNAME
  artifacts:
    name: $CI_PROJECT_NAME-$CI_COMMIT_TAG-$CI_JOB_NAME
    paths:
      - $CI_PROJECT_NAME-$CI_COMMIT_TAG-$CI_JOB_NAME


## cross compiling
## job name = target name

# Some tier 1 platforms
x86_64-unknown-linux-gnu:
  <<: *deploy
  variables:

x86_64-pc-windows-gnu:
  <<: *deploy
  variables:
    GCC_PACKAGE: mingw-w64-x86-64
    GCC: x86_64-w64-mingw32
    BINARY_SUFFIX: .exe

i686-unknown-linux-gnu:
  <<: *deploy
  image: i386/rust
  variables:

i686-pc-windows-gnu:
  <<: *deploy
  image: i386/rust
  variables:
    GCC_PACKAGE: mingw-w64-i686
    GCC: i686-w64-mingw32
    BINARY_SUFFIX: .exe
    # On i686-pc-windows-gnu, link fails because _Unwind_RaiseException and _Unwind_Resume are not found
    # Hence stop using panic
    RUST_FLAGS: -C panic=abort


